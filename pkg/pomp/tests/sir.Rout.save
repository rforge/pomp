
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
> 
> tbasis <- seq(0,25,by=1/52)
> basis <- periodic.bspline.basis(tbasis,nbasis=3,names="seas%d")
> 
> ## some parameters
> params <- c(
+             gamma=26,mu=0.02,iota=0.01,
+             beta1=400,beta2=480,beta3=320,
+             beta.sd=1e-3,
+             pop=2.1e6,
+             rho=0.6,
+             S.0=26/400,I.0=0.001,R.0=1-26/400
+             )
> 
> ## set up the pomp object
> ## the C codes "sir_euler_simulator" and "sir_euler_density" are included in the "examples" directory (file "sir.c")
> po <- pomp(
+            times=1/52*seq.int(length=4*52),
+            data=rbind(reports=numeric(52*4)),
+            params=params,
+            t0=0,
+            tcovar=tbasis,
+            covar=basis,
+            zeronames=c("cases"),
+            rprocess=euler.sim(
+              delta.t=1/52/20,
+              step.fun=function(t,x,params,covars,delta.t,...) {
+                with(
+                     as.list(c(x,params)),
+                     {
+                       beta <- sum(c(beta1,beta2,beta3)*covars)
+                       dW <- rgammawn(n=1,sigma=beta.sd,dt=delta.t)
+                       foi <- (iota+beta*I*dW/delta.t)/pop
+                       trans <- c(
+                                  rpois(n=1,lambda=mu*pop*delta.t),
+                                  reulermultinom(n=1,size=S,rate=c(foi,mu),dt=delta.t),
+                                  reulermultinom(n=1,size=I,rate=c(gamma,mu),dt=delta.t),
+                                  reulermultinom(n=1,size=R,rate=c(mu),dt=delta.t)
+                                  )
+                       c(
+                         S=S+trans[1]-trans[2]-trans[3],
+                         I=I+trans[2]-trans[4]-trans[5],
+                         R=R+trans[4]-trans[6],
+                         cases=cases+trans[4],
+                         W=if (beta.sd>0) W+(dW-delta.t)/beta.sd else W,
+                         B=trans[1],
+                         SI=trans[2],
+                         SD=trans[3],
+                         IR=trans[4],
+                         ID=trans[5],
+                         RD=trans[6],
+                         dW=dW
+                         )
+                     }
+                     )
+              }
+              ),
+            dprocess=onestep.dens(
+              dens.fun=function(t1,t2,params,x1,x2,covars,...) {
+                with(
+                     as.list(params),
+                     {
+                       dt <- t2-t1
+                       beta <- sum(c(beta1,beta2,beta3)*covars)
+                       beta.var <- beta.sd^2
+                       dW <- x2['dW']
+                       foi <- (iota+beta*x1["I"]*dW/dt)/pop
+                       probs <- c(
+                                  dpois(x=x2["B"],lambda=mu*pop*dt,log=T),
+                                  deulermultinom(x=x2[c("SI","SD")],size=x1["S"],rate=c(foi,mu),dt=dt,log=T),
+                                  deulermultinom(x=x2[c("IR","ID")],size=x1["I"],rate=c(gamma,mu),dt=dt,log=T),
+                                  deulermultinom(x=x2["RD"],size=x1["R"],rate=c(mu),dt=dt,log=T),
+                                  dgamma(x=dW,shape=dt/beta.var,scale=beta.var,log=T)
+                                  )
+                       sum(probs)
+                     }
+                     )
+              }
+              ),
+            skeleton.type="vectorfield",
+            skeleton=function(x,t,params,covars,...) {
+              xdot <- rep(0,length(x))
+              with(
+                   as.list(c(x,params)),
+                   {
+                     beta <- sum(c(beta1,beta2,beta3)*covars)
+                     foi <- (iota+beta*I)/pop
+                     terms <- c(
+                                mu*pop,
+                                foi*S,
+                                mu*S,
+                                gamma*I,
+                                mu*I,
+                                mu*R
+                                )
+                     xdot[1:4] <- c(
+                                    terms[1]-terms[2]-terms[3],
+                                    terms[2]-terms[4]-terms[5],
+                                    terms[4]-terms[6],
+                                    terms[4]
+                                    )
+                     xdot
+                   }
+                   )
+            },
+ #           measurement.model=reports~binom(size=cases,prob=rho),
+            rmeasure=function(x,t,params,covars,...){
+              with(
+                   as.list(c(x,params)),
+                   {
+                     rep <- round(rnorm(n=1,mean=rho*cases,sd=sqrt(rho*(1-rho)*cases)))
+                     if (rep<0) rep <- 0
+                     c(reports=rep)
+                   }
+                   )
+            },
+            dmeasure=function(y,x,t,params,log,covars,...){
+              with(
+                   as.list(c(x,params)),
+                   {
+                     if (y > 0) 
+                       f <- diff(pnorm(q=y+c(-0.5,0.5),mean=rho*cases,sd=sqrt(rho*(1-rho)*cases),lower.tail=TRUE,log.p=FALSE))
+                     else
+                       f <- pnorm(q=0.5,mean=rho*cases,sd=sqrt(rho*(1-rho)*cases),lower.tail=TRUE,log.p=FALSE)
+                     if (log) log(f) else f
+                   }
+                   )
+            },
+            initializer=function(params,t0,...){
+              with(
+                   as.list(params),
+                   {
+                     fracs <- c(S.0,I.0,R.0)
+                     x0 <- c(
+                             round(pop*fracs/sum(fracs)), # make sure the three compartments sum to 'pop' initially
+                             rep(0,9)	# zeros for 'cases', 'W', and the transition numbers
+                             )
+                     names(x0) <- c("S","I","R","cases","W","B","SI","SD","IR","ID","RD","dW")
+                     x0["cases"] <- gamma/52*x0["I"]
+                     x0
+                   }
+                   )
+            }
+            )
> 
> show(po)
208 records of 1 observables, recorded from t = 0.01923077 to 4 
summary of data:
    reports 
 Min.   :0  
 1st Qu.:0  
 Median :0  
 Mean   :0  
 3rd Qu.:0  
 Max.   :0  
zero time, t0 = 0
1301 records of 3 covariates, recorded from t = 0 to 25 
summary of covariates:
     seas1             seas2             seas3        
 Min.   :0.04167   Min.   :0.04185   Min.   :0.04185  
 1st Qu.:0.12321   1st Qu.:0.11563   1st Qu.:0.11563  
 Median :0.31510   Median :0.30253   Median :0.30253  
 Mean   :0.33359   Mean   :0.33321   Mean   :0.33321  
 3rd Qu.:0.56758   3rd Qu.:0.54719   3rd Qu.:0.54719  
 Max.   :0.66667   Max.   :0.66630   Max.   :0.66630  
process model simulator, rprocess = 
function (xstart, times, params, ..., zeronames = character(0), 
    tcovar, covar, .getnativesymbolinfo = TRUE) 
{
    .Call(euler_model_simulator, func = efun, xstart = xstart, 
        times = times, params = params, dt = object@delta.t, 
        method = 0L, zeronames = zeronames, tcovar = tcovar, 
        covar = covar, args = pairlist(...), gnsi = .getnativesymbolinfo)
}
<environment: 0x2790e18>
process model density, dprocess = 
function (x, times, params, ..., tcovar, covar, log = FALSE, 
    .getnativesymbolinfo = TRUE) 
{
    .Call(euler_model_density, func = efun, x = x, times = times, 
        params = params, tcovar = tcovar, covar = covar, log = log, 
        args = pairlist(...), gnsi = .getnativesymbolinfo)
}
<environment: 0x27bf198>
measurement model simulator, rmeasure = 
function (x, t, params, covars, ...) 
{
    with(as.list(c(x, params)), {
        rep <- round(rnorm(n = 1, mean = rho * cases, sd = sqrt(rho * 
            (1 - rho) * cases)))
        if (rep < 0) 
            rep <- 0
        c(reports = rep)
    })
}
measurement model density, dmeasure = 
function (y, x, t, params, log, covars, ...) 
{
    with(as.list(c(x, params)), {
        if (y > 0) 
            f <- diff(pnorm(q = y + c(-0.5, 0.5), mean = rho * 
                cases, sd = sqrt(rho * (1 - rho) * cases), lower.tail = TRUE, 
                log.p = FALSE))
        else f <- pnorm(q = 0.5, mean = rho * cases, sd = sqrt(rho * 
            (1 - rho) * cases), lower.tail = TRUE, log.p = FALSE)
        if (log) 
            log(f)
        else f
    })
}
prior simulator, rprior = 
function not specified
prior density, dprior = 
native function '_pomp_default_dprior', dynamically loaded from 'pomp'
skeleton ( vectorfield ) = 
function (x, t, params, covars, ...) 
{
    xdot <- rep(0, length(x))
    with(as.list(c(x, params)), {
        beta <- sum(c(beta1, beta2, beta3) * covars)
        foi <- (iota + beta * I)/pop
        terms <- c(mu * pop, foi * S, mu * S, gamma * I, mu * 
            I, mu * R)
        xdot[1:4] <- c(terms[1] - terms[2] - terms[3], terms[2] - 
            terms[4] - terms[5], terms[4] - terms[6], terms[4])
        xdot
    })
}
initializer = 
function (params, t0, ...) 
{
    with(as.list(params), {
        fracs <- c(S.0, I.0, R.0)
        x0 <- c(round(pop * fracs/sum(fracs)), rep(0, 9))
        names(x0) <- c("S", "I", "R", "cases", "W", "B", "SI", 
            "SD", "IR", "ID", "RD", "dW")
        x0["cases"] <- gamma/52 * x0["I"]
        x0
    })
}
parameter transformation (to estimation scale) = 
function not specified
parameter transformation (from estimation scale) = 
function not specified
parameter(s):
   gamma       mu     iota    beta1    beta2    beta3  beta.sd      pop 
2.60e+01 2.00e-02 1.00e-02 4.00e+02 4.80e+02 3.20e+02 1.00e-03 2.10e+06 
     rho      S.0      I.0      R.0 
6.00e-01 6.50e-02 1.00e-03 9.35e-01 
> 
> set.seed(3049953)
> ## simulate from the model
> tic <- Sys.time()
> x <- simulate(po,nsim=3)
> toc <- Sys.time()
> print(toc-tic)
Time difference of 0.7570972 secs
> 
> pdf(file='sir.pdf')
> 
> plot(x[[1]],variables=c("S","I","R","cases","W"))
> 
> t1 <- seq(0,4/52,by=1/52/25)
> X1 <- simulate(po,nsim=10,states=TRUE,obs=TRUE,times=t1)
> 
> t2 <- seq(0,2,by=1/52)
> X2 <- simulate(po,nsim=1,states=TRUE,obs=TRUE,times=t2)
> 
> t3 <- seq(0,20,by=1/52)
> tic <- Sys.time()
> X3 <- trajectory(po,times=t3,hmax=1/52)
> toc <- Sys.time()
> print(toc-tic)
Time difference of 0.4441555 secs
> plot(t3,X3['I',1,],type='l')
> 
> f1 <- dprocess(
+                po,
+                x=X1$states[,,31:40],
+                times=t1[31:40],
+                params=parmat(params,nrep=10),
+                log=TRUE
+                )
> print(apply(f1,1,sum),digits=4)
 [1] -47.60 -63.21 -50.66 -48.84 -48.28 -52.25 -45.21 -45.75 -51.05 -49.98
> 
> g1 <- dmeasure(
+                po,
+                y=rbind(reports=X1$obs[,7,]),
+                x=X1$states,
+                times=t1,
+                params=parmat(params,nrep=10),
+                log=TRUE
+                )
> print(apply(g1,1,sum),digits=4)
 [1] -406.8 -396.6   -Inf -383.8 -447.9 -380.6 -255.1 -382.1 -460.4   -Inf
> 
> h1 <- skeleton(
+                po,
+                x=X2$states[,1,55:70,drop=FALSE],
+                t=t2[55:70],
+                params=params
+                )
> print(h1[c("S","I","R"),,],digits=4)
        time
variable     [,1]     [,2]      [,3]      [,4]     [,5]   [,6]     [,7]   [,8]
       S  32161.6  31582.4  32142.21  31758.36  31639.0  32006  31953.5  31666
       I   -318.4   -218.9    -88.93     21.52    128.7    218    309.2    403
       R -31855.2 -31375.0 -32064.98 -31792.40 -31780.0 -32236 -32276.8 -32083
        time
variable     [,9]    [,10]    [,11]    [,12]    [,13]  [,14]  [,15]  [,16]
       S  31017.5  29782.5  29443.9  28916.7  27997.1  27494  26434  25448
       I    518.5    675.3    768.6    868.8    996.8   1074   1187   1278
       R -31549.7 -30472.3 -30226.0 -29798.8 -29007.2 -28580 -27634 -26740
> 
> ## now repeat using the compiled native codes built into the package
> pompExample(euler.sir)
In 'pomp': the following unrecognized argument(s) will be stored for use by user-defined functions: 'nbasis','degree','period'
newly created object(s):
 euler.sir 
> po <- euler.sir
> 
> set.seed(3049953)
> ## simulate from the model
> tic <- Sys.time()
> x <- simulate(po,nsim=100)
> toc <- Sys.time()
> print(toc-tic)
Time difference of 2.466657 secs
> plot(x[[1]],variables=c("S","I","R","cases","W"))
> 
> t3 <- seq(0,20,by=1/52)
> tic <- Sys.time()
> X4 <- trajectory(po,times=t3,hmax=1/52)
> toc <- Sys.time()
> print(toc-tic)
Time difference of 0.01557875 secs
> plot(t3,X4['I',1,],type='l')
> 
> g2 <- dmeasure(
+                po,
+                y=rbind(reports=X1$obs[,7,]),
+                x=X1$states,
+                times=t1,
+                params=parmat(coef(po),nrep=10),
+                log=TRUE
+                )
> print(apply(g2,1,sum),digits=4)
 [1] -406.8 -396.6   -Inf -383.8 -447.9 -380.6 -255.1 -382.1 -460.4   -Inf
> 
> h2 <- skeleton(
+                po,
+                x=X2$states[,1,55:70,drop=FALSE],
+                t=t2[55:70],
+                params=coef(po)
+                )
> print(h2[c("S","I","R"),,],digits=4)
        time
variable     [,1]     [,2]      [,3]      [,4]     [,5]   [,6]     [,7]   [,8]
       S  32161.6  31582.4  32142.21  31758.36  31639.0  32006  31953.5  31666
       I   -318.4   -218.9    -88.93     21.52    128.7    218    309.2    403
       R -31855.2 -31375.0 -32064.98 -31792.40 -31780.0 -32236 -32276.8 -32083
        time
variable     [,9]    [,10]    [,11]    [,12]    [,13]  [,14]  [,15]  [,16]
       S  31017.5  29782.5  29443.9  28916.7  27997.1  27494  26434  25448
       I    518.5    675.3    768.6    868.8    996.8   1074   1187   1278
       R -31549.7 -30472.3 -30226.0 -29798.8 -29007.2 -28580 -27634 -26740
> 
> stopifnot(max(abs(g2-g1),na.rm=T)<.Machine$double.eps*100)
> stopifnot(max(abs(h2-h1),na.rm=T)<.Machine$double.eps*2^16)
> 
> invisible(states(po)[,1:2])
> time(po) <- seq(0,1,by=1/52)
> invisible(states(po)[,1:3])
> invisible(states(simulate(po))[,1:3])
> 
> po <- window(euler.sir,start=1,end=2)
> plot(simulate(po))
> timezero(po)
[1] 0
> timezero(po)<-2*time(po)[1]-time(po)[2]
> plot(simulate(po))
> 
> dev.off()
null device 
          1 
> 
> ## test of vectorfield integrator
> 
> pompExample(euler.sir)
In 'pomp': the following unrecognized argument(s) will be stored for use by user-defined functions: 'nbasis','degree','period'
newly created object(s):
 euler.sir 
> 
> po <- pomp(
+            window(euler.sir,end=2),
+            skeleton.type="vectorfield",
+            skeleton=function(x,t,params,...) {
+              xdot <- rep(0,length(x))
+              with(
+                   as.list(c(x,params)),
+                   {
+                     covars <- as.numeric(periodic.bspline.basis(t,nbasis=3,degree=3,period=1))
+                     beta <- sum(c(beta1,beta2,beta3)*covars)
+                     foi <- (iota+beta*I)/pop
+                     terms <- c(
+                                mu*pop,
+                                foi*S,
+                                mu*S,
+                                gamma*I,
+                                mu*I,
+                                mu*R
+                                )
+                     xdot[1:4] <- c(
+                                    terms[1]-terms[2]-terms[3],
+                                    terms[2]-terms[4]-terms[5],
+                                    terms[4]-terms[6],
+                                    terms[4]
+                                    )
+                     xdot
+                   }
+                   )
+            }
+            )
> 
> x1 <- trajectory(po,hmax=1/52,as.data.frame=T)
> x2 <- trajectory(window(euler.sir,end=2),hmax=1/52,as.data.frame=T)
> 
> stopifnot(identical(round(x1$S,3),round(x2$S,3)))
> stopifnot(identical(round(x1$I,3),round(x2$I,3)))
> stopifnot(identical(round(x1$cases,3),round(x2$cases,3)))
> 
> proc.time()
   user  system elapsed 
  4.620   0.016   4.788 
