
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
> 
> params <- c(
+             nu=1/70,
+             mu=1/70,
+             beta1=330,
+             beta2=410,
+             beta3=490,
+             gamma=24,
+             iota=0.1,
+             S.0=0.05,
+             I.0=1e-4,
+             R.0=0.95,
+             N.0=1000000
+             )
> 
> seasonality <- data.frame(
+                           time=seq(0,10,by=1/52/10),
+                           seas=periodic.bspline.basis(seq(0,10,by=1/52/10),nbasis=3,degree=3,period=1)
+                           )
> simulate(
+          pomp(
+               data=data.frame(
+                 time=seq(from=0,to=2,by=1/52),
+                 reports=NA
+                 ),
+               times="time",
+               t0=0,
+               covar=seasonality,
+               tcovar="time",
+               rprocess=gillespie.sim(
+                 rate.fun=function(j, x, t, params, covars, ...) {
+                   switch(
+                          j,
+                          params["nu"]*x["N"], # birth
+                          params["mu"]*x["S"], # susceptible death
+                          {                         # infection
+                            beta <- params[c("beta1","beta2","beta3")]%*%covars[c("seas.1","seas.2","seas.3")]
+                            (beta*x["I"]+params["iota"])*x["S"]/x["N"]
+                          },
+                          params["mu"]*x["I"], # infected death
+                          params["gamma"]*x["I"], # recovery
+                          params["mu"]*x["R"], # recovered death
+                          stop("unrecognized event ",j)
+                          )
+                 },
+                 v=cbind(
+                   birth=c(1,0,0,1,0),
+                   sdeath=c(-1,0,0,-1,0),
+                   infection=c(-1,1,0,0,0),
+                   ideath=c(0,-1,0,-1,0),
+                   recovery=c(0,-1,1,0,1),
+                   rdeath=c(0,0,-1,-1,0)
+                   ),
+                 d=cbind(
+                   birth=c(0,0,0,1,0),
+                   sdeath=c(1,0,0,0,0),
+                   infection=c(1,1,0,1,0),
+                   ideath=c(0,1,0,0,0),
+                   recovery=c(0,1,0,0,0),
+                   rdeath=c(0,0,1,0,0)
+                   )
+                 ),
+               zeronames=c("cases"),
+               measurement.model=reports~binom(size=cases,prob=0.1),
+               initializer=function(params, t0, ...){
+                 comp.names <- c("S","I","R")
+                 icnames <- paste(comp.names,"0",sep=".")
+                 snames <- c("S","I","R","N","cases")
+                 fracs <- params[icnames]
+                 x0 <- numeric(length(snames))
+                 names(x0) <- snames
+                 x0["N"] <- params["N.0"]
+                 x0[comp.names] <- round(params['N.0']*fracs/sum(fracs))
+                 x0
+               }
+               ),
+          params=params,
+          nsim=1,
+          seed=1165270654L
+          ) -> gsir
> 
> 
> tail(as(gsir,"data.frame"))
        time reports     S    I      R      N cases    seas.1     seas.2
100 1.903846      41 65075 1271 933488 999834   555 0.5954581 0.06404093
101 1.923077      68 64761 1210 933849 999820   639 0.6195570 0.07790927
102 1.942308      62 64434 1225 934136 999795   570 0.6393034 0.09510602
103 1.961538      49 64055 1258 934441 999754   575 0.6541212 0.11563116
104 1.980769      53 63765 1225 934740 999730   588 0.6634343 0.13948471
105 2.000000      60 63451 1290 935012 999753   531 0.6666667 0.16666667
       seas.3
100 0.3405010
101 0.3025338
102 0.2655906
103 0.2302477
104 0.1970810
105 0.1666667
> 
> pompExample(gillespie.sir)
in 'pomp': the following unrecognized argument(s) will be stored for use by user-defined functions: 'comp.names','ic.names','nbasis','degree','period'
newly created object(s):
 gillespie.sir 
> 
> tail(as.data.frame(simulate(gillespie.sir,times=time(gsir),t0=timezero(gsir),seed=1165270654L)))
        time reports     S    I      R      N cases
100 1.903846      50 65088 1273 933471 999832   551
101 1.923077      50 64777 1200 933837 999814   647
102 1.942308      59 64442 1230 934114 999786   559
103 1.961538      62 64060 1258 934433 999751   586
104 1.980769      56 63775 1219 934732 999726   587
105 2.000000      49 63461 1286 935000 999747   531
> 
> proc.time()
   user  system elapsed 
  2.372   0.056   2.454 
